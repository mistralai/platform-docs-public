openapi: 3.1.0
info:
  title: Mistral AI API
  description: Our Chat Completion and Embeddings APIs specification. Create your account on [La Plateforme](https://console.mistral.ai) to get access and read the [docs](https://docs.mistral.ai) to learn how to use it.
  version: 0.0.2
servers:
  - url: 'https://api.mistral.ai/v1'
paths:
  /chat/completions:
    post:
      operationId: createChatCompletion
      summary: Create Chat Completions
      requestBody:
        required: true
        content:
          application/json:
            schema:
                anyOf:
                  - $ref: '#/components/schemas/ChatCompletionRequest'
                  - $ref: '#/components/schemas/ChatCompletionRequestFunctionCall'
                  - $ref: '#/components/schemas/ChatCompletionRequestJSONMode'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ChatCompletionResponse'
                  - $ref: '#/components/schemas/ChatCompletionResponseFunctionCall'
                  - $ref: '#/components/schemas/ChatCompletionResponseJSONMode'
  /fim/completions:
    post:
      operationId: createFIMCompletion
      summary: Create FIM Completions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/FIMCompletionRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/FIMCompletionResponse"
  /embeddings:
    post:
      operationId: createEmbedding
      summary: Create Embeddings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmbeddingRequest'
            
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmbeddingResponse'
  /models:
    get:
      operationId: listModels
      summary: List Available Models
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelList'
components:
  schemas:
    Error:
      type: object
      properties:
        type:
          type: string
          nullable: false
        message:
          type: string
          nullable: false
        param:
          type: string
          nullable: true
        code:
          type: string
          nullable: true
      required:
        - type
        - message
        - param
        - code
    ErrorResponse:
      type: object
      properties:
        error:
          $ref: '#/components/schemas/Error'
      required:
        - error
    ModelList:
      type: object
      properties:
        object:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Model'
      required:
        - object
        - data
    ChatCompletionRequest:
      type: object
      title: Regular
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.
          type: string
          example: "mistral-small-latest"
        messages:
          description: |
            The prompt(s) to generate completions for, encoded as a list of dict with role and content.
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum:
                  - system
                  - user
                  - assistant
                  - tool
              content:
                type: string
              prefix:
                type: bool
                default: false
                description: |
                  **Only for the `assistant` role**

                  Set this to `true` when adding an assistant message as prefix to condition the model response.
                  The role of the prefix message is to force the model to start its answer by the content of
                  the message.
            example: {"role": "user", "content": "Who is the best French painter? Answer in one short sentence."}
        temperature:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 0.7
          nullable: true
          description: |
            What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
        top_p:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 1.0
          nullable: true
          description: |
            Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
        max_tokens:
          type: integer
          minimum: 0
          default: null
          nullable: true
          example: 512
          description: |
            The maximum number of tokens to generate in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. 
        stream:
          type: boolean
          default: false
          nullable: true
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
        safe_prompt:
          type: boolean
          default: false
          description: |
            Whether to inject a safety prompt before all conversations.
        random_seed:
          type: integer
          default: null
          example: 1337
          description: |
            The seed to use for random sampling. If set, different calls will generate deterministic results.
      required:
        - model
        - messages
    ChatCompletionRequestJSONMode:
      type: object
      title: JSON mode
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.
          type: string
          example: "mistral-small-latest"
        messages:
          description: |
            The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum:
                  - system
                  - user
                  - assistant
                  - tool
              content:
                type: string
            example: {"role": "user", "content": "Who is the best French painter? Answer in JSON."}
        response_format:
          type: object
          description: |
            An object specifying the format that the model must output. Setting to `{ "type": "json_object" }` enables JSON mode, which guarantees the message the model generates is in JSON.
            When using JSON mode you MUST also instruct the model to produce JSON yourself with a system or a user message.
          properties:
            type:
              type: string
              example: "json_object"
        temperature:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 0.7
          nullable: true
          description: |
            What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
        top_p:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 1.0
          nullable: true
          description: |
            Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
        max_tokens:
          type: integer
          minimum: 0
          default: null
          nullable: true
          example: 512
          description: |
            The maximum number of tokens to generate in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. 
        stream:
          type: boolean
          default: false
          nullable: true
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
        safe_prompt:
          type: boolean
          default: false
          description: |
            Whether to inject a safety prompt before all conversations.
        random_seed:
          type: integer
          default: null
          example: 1337
          description: |
            The seed to use for random sampling. If set, different calls will generate deterministic results.
      required:
        - model
        - messages
    ChatCompletionRequestFunctionCall:
      type: object
      title: Function calling
      properties:
        model:
          description: |
            ID of the model to use. You can use the [List Available Models](/api#operation/listModels) API to see all of your available models, or see our [Model overview](/models) for model descriptions.
          type: string
          example: "mistral-small-latest"
        messages:
          description: |
            The prompt(s) to generate completions for, encoded as a list of dict with role and content. The first prompt role should be `user` or `system`.
            When role is `tool`, the properties should contain `tool_call_id` (string or `null`).
          type: array
          items:
            type: object
            properties:
              role:
                type: string
                enum:
                  - system
                  - user
                  - assistant
                  - tool
              content:
                type: string
            example: {"role": "user", "content": "What is the weather like in Paris?"}
        temperature:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 0.7
          nullable: true
          description: |
            What sampling temperature to use, between 0.0 and 1.0. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.

            We generally recommend altering this or `top_p` but not both.
        top_p:
          type: number
          minimum: 0.0
          maximum: 1.0
          default: 1.0
          nullable: true
          description: |
            Nucleus sampling, where the model considers the results of the tokens with `top_p` probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
        max_tokens:
          type: integer
          minimum: 0
          default: null
          example: 64
          nullable: true
          description: |
            The maximum number of tokens to generate in the completion.

            The token count of your prompt plus `max_tokens` cannot exceed the model's context length. 
        stream:
          type: boolean
          default: false
          nullable: true
          description: |
            Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. Otherwise, the server will hold the request open until the timeout or until completion, with the response containing the full result as JSON.
        safe_prompt:
          type: boolean
          default: false
          description: |
            Whether to inject a safety prompt before all conversations.
        tools:
          type: array
          description: |
            A list of available tools for the model. Use this to specify functions for which the model can generate JSON inputs.
          items:
            type: object
            required:
              - type
              - function
            properties:
              type:
                type: string
                description: |
                  The type of the tool. Currently, only `function` is supported.
                example: function
              function:
                type: object
                required:
                  - name
                description: |
                  The function properties.
                properties:
                  description:
                    type: string
                    description: |
                      The description of the function to help the model determine when and how to invoke it.
                    example: Get the current weather in a given location.
                  name:
                    type: string
                    required: true
                    description: |
                      The name of the function to be called. Must be a-z,A-Z,0-9 or contain underscores and dashes, with a maximum length of 64.
                    example: get_weather
                  parameters:
                    type: object
                    description: |
                      The function parameters, defined using a JSON Schema object. If omitted, the function is considered to have an empty parameter list.
                    example: {
                      "type": "object",
                      "properties": {
                        "location": {
                          "type": "string",
                          "description": "The city and department, e.g. Marseille, 13"
                        },
                        "unit": {
                          "type": "string",
                          "enum": ["celsius", "fahrenheit"]
                        }
                      },
                      "required": ["location"]
                    }
        tool_choice:
          type: string
          default: auto
          description: |
            Specifies if/how functions are called. If set to `none` the model won't call a function and will generate a message instead. If set to `auto` the model can choose to either generate a message or call a function. If set to `any` the model is forced to call a function.
          example: auto
        random_seed:
          type: integer
          default: null
          example: 1337
          description: |
            The seed to use for random sampling. If set, different calls will generate deterministic results.
      required:
        - model
        - messages
    FIMCompletionRequest:
      properties:
        prompt:
          type: string
          description: The text/code to complete.
          example: "def"
        suffix:
          type: string
          nullable: true
          description: |
            Optional text/code that adds more context for the model.
            When given a `prompt` and a `suffix` the model will fill
            what is between them. When `suffix` is not provided, the
            model will simply execute completion starting with
            `prompt`.
          example: "return a+b"
        model:
          type: string
          nullable: true
          description: |
            ID of the model to use. Only compatible for now with:
              - `codestral-2405`
              - `codestral-latest` 
          example: "codestral-latest"
        temperature:
          type: number
          maximum: 1.0
          minimum: 0.0
          default: 0.7
          nullable: true
          description: | 
            What sampling temperature to use, between 0.0 and 1.0. 
            Higher values like 0.8 will make the outptu more random,
            while lower values like 0.2 will make it more focused and
            deterministic.

            We generally recommend altering this or `top_p` but not both.
          example: 0.0
        top_p:
          type: number
          maximum: 1.0
          minimum: 0.0
          default: 1.0
          nullable: true
          description: |
            Nucleus sampling, where the model considers the results of the
            tokens with with `top_p` probability mass. So 0.1 means only
            the tokens comprising the top 10% probability mass are considered.

            We generally recommend altering this or `temperature` but not both.
          example: 1.0
        max_tokens:
          type: integer
          minimum: 0
          nullable: true
          description: |
            The maximum number of tokens to generate in the completion.

            The token count of your prompt plus `max_tokens` cannot
            exceed the model's context length.
          example: 1024
        min_tokens:
          type: integer
          minimum: 0
          nullable: true
          description: |
            The minimum number of tokens to generate in the completion.
        stream:
          type: boolean
          default: false
          description: |
            Whether to stream back partial progress. If set, tokens will be
            sent as data-only server-side events as they become available,
            with the stream terminated by a data: [DONE] message." 
            Otherwise, the server will hold the request open until the timeout
            or until completion, with the response containing the full result
            as JSON.
          example: false
        random_seed:
          type: integer
          minimum: 0
          nullable: true
          description: |
            The seed to use for random sampling. If set, different calls will
            generate deterministic results.
          example: 1337
        stop:
          anyOf:
          - type: string
            description: Stop generation if this token is detected.
          - type: array
            items:
              type: string
              description: Stop generation if one of these tokens is detected.
          default: []
      type: object
      required:
        - prompt
        - model
    ChatCompletionResponse:
      type: object
      title: Regular
      properties:
        id:
          type: string
          example: cmpl-e5cc70bb28c444948073e77776eb30ef
        object:
          type: string
          example: "chat.completion"
        created:
          type: integer
          example: 1702256327
        model:
          type: string
          example: mistral-small-latest
        choices:
          type: array
          items:
            type: object
            required:
              - index
              - text
              - finish_reason
            properties:
              index:
                type: integer
                example: 0
              message:
                type: object
                properties:
                  role:
                    type: string
                    enum:
                      - user
                      - assistant
                    example: assistant
                  content:
                    type: string
                    example: >-
                      Claude Monet is often considered one of the best French painters due
                      to his significant role in the Impressionist movement.
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - model_length
                  - error
                  - tool_calls
                example: stop
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              example: 16
            completion_tokens:
              type: integer
              example: 34
            total_tokens:
              type: integer
              example: 50
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
    ChatCompletionResponseJSONMode:
      type: object
      title: JSON mode
      properties:
        id:
          type: string
          example: cmpl-e5cc70bb28c444948073e77776eb30ef
        object:
          type: string
          example: "chat.completion"
        created:
          type: integer
          example: 1702256327
        model:
          type: string
          example: mistral-small-latest
        choices:
          type: array
          items:
            type: object
            required:
              - index
              - text
              - finish_reason
            properties:
              index:
                type: integer
                example: 0
              message:
                type: object
                properties:
                  role:
                    type: string
                    enum:
                      - user
                      - assistant
                    example: assistant
                  content:
                    type: string
                    example: '{"name": "Claude Monet", "reason": "Claude Monet is often considered one of the best French painters due to his significant role in the development of Impressionism, a major art movement that originated in France. His water lily paintings are among the most famous works in the history of art."}'
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - model_length
                  - error
                  - tool_calls
                example: stop
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              example: 14
            completion_tokens:
              type: integer
              example: 83
            total_tokens:
              type: integer
              example: 69
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
    ChatCompletionResponseFunctionCall:
      type: object
      title: Function calling
      properties:
        id:
          type: string
          example: cmpl-e5cc70bb28c444948073e77776eb30ef
        object:
          type: string
          example: "chat.completion"
        created:
          type: integer
          example: 1702256327
        model:
          type: string
          example: mistral-large-latest
        choices:
          type: array
          items:
            type: object
            required:
              - index
              - text
              - finish_reason
            properties:
              index:
                type: integer
                example: 0
              message:
                type: object
                properties:
                  role:
                    type: string
                    example: assistant
                  content:
                    type: string
                    example: ""
                  tool_calls:
                    type: array
                    items:
                      type: object
                      properties:
                        function:
                          type: object
                          properties:
                            name:
                              type: string
                            arguments:
                              type: str
                    example: [
                      {
                        "function": {
                          "name": "get_current_weather",
                          "arguments": "{\"location\": \"Paris, 75\"}"
                            }
                          }
                      ]
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - model_length
                  - error
                  - tool_calls
                example: tool_calls
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              example: 118
            completion_tokens:
              type: integer
              example: 35
            total_tokens:
              type: integer
              example: 153
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
    EmbeddingRequest:
      type: object
      properties:
        model:
          type: string
          example: "mistral-embed"
          description: |
            The ID of the model to use for this request.
        input:
          type: array
          items:
            type: string
          example: ["Hello", "world"]
          description: |
            The list of strings to embed.
        encoding_format:
          type: string
          enum:
            - "float"
          example: "float"
          description: |
            The format of the output data.
    EmbeddingResponse:
      type: object
      properties:
        id: 
          type: string
          example: embd-aad6fc62b17349b192ef09225058bc45
        object:
          type: string
          example: list
        data:
          type: array
          items:
            type: object
            properties:
              object:
                type: string
                example: embedding
              embedding:
                type: array
                items:
                  type: number
                example: [0.1, 0.2, 0.3]
              index:
                type: int
                example: 0
          example: [
            {
              "object": "embedding",
              "embedding": [0.1, 0.2, 0.3],
              "index": 0
            },
            {
              "object": "embedding",
              "embedding": [0.4, 0.5, 0.6],
              "index": 1
            }
          ]
        model:
          type: string
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              example: 9
            total_tokens:
              type: integer
              example: 9
          required:
            - prompt_tokens
            - total_tokens
      required:
        - id
        - object
        - data
        - model
        - usage
    Model:
      title: Model
      properties:
        id:
          type: string
        object:
          type: string
        created:
          type: integer
        owned_by:
          type: string
      required:
        - id
        - object
        - created
        - owned_by
    FIMCompletionResponse:
      type: object
      properties:
        id:
          type: string
          example: 5b35cc2e69bf4ba9a11373ee1f1937f8
        object:
          type: string
          example: "chat.completion"
        created:
          type: integer
          example: 1702256327
        model:
          type: string
          example: codestral-latest
        choices:
          type: array
          items:
            type: object
            required:
              - index
              - text
              - finish_reason
            properties:
              index:
                type: integer
                example: 0
              message:
                type: object
                properties:
                  role:
                    type: string
                    enum:
                      - user
                      - assistant
                    example: assistant
                  content:
                    type: string
                    example: >-
                      " add(a,b):"
              finish_reason:
                type: string
                enum:
                  - stop
                  - length
                  - model_length
                  - error
                example: stop
        usage:
          type: object
          properties:
            prompt_tokens:
              type: integer
              example: 8
            completion_tokens:
              type: integer
              example: 9
            total_tokens:
              type: integer
              example: 17
          required:
            - prompt_tokens
            - completion_tokens
            - total_tokens
